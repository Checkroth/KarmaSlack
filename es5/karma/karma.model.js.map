{"version":3,"sources":["karma/karma.model.js"],"names":[],"mappings":";;;;;;;;;;;;wBAAqB,UAAU;;;;oCACT,wBAAwB;;;;AAE9C,IAAI,WAAW,GAAG,sBAAS,MAAM,CAAC;AACjC,OAAM,EAAE,MAAM;AACd,OAAM,EAAE,MAAM;AACd,YAAW,EAAE,MAAM;CACnB,CAAC,CAAC;;IAEG,UAAU;UAAV,UAAU;wBAAV,UAAU;;;cAAV,UAAU;;SAEG,qBAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAC;AACvC,OAAI,CAAC,OAAO,CAAC,EAAC,MAAM,EAAN,MAAM,EAAE,MAAM,EAAN,MAAM,EAAC,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AAC7C,QAAI,IAAI,EAAE;AACT,SAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAC3C,SAAI,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACxB,aAAO,CAAC,GAAG,6BAA0B,MAAM,CAAG,CAAC;MAC/C,CAAC,CAAC;KACH,MACI;AACJ,SAAI,CAAC,MAAM,CAAC;AACX,cAAQ,EAAE,MAAM;AAChB,cAAQ,EAAE,MAAM;AAChB,mBAAa,EAAE,WAAW;MAC1B,EAAE,UAAS,GAAG,EAAE,GAAG,EAAE;AACrB,UAAI,GAAG,EAAE,OAAO,CAAC,GAAG,4BAAyB,MAAM,qBAAgB,WAAW,CAAG,CAAA;MACjF,CAAC,CAAC;KACH;IACD,CAAC,CAAC;GACH;;;SACmB,uBAAC,MAAM,EAAE,MAAM,EAAC;AACnC,UAAO,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,EAAN,MAAM,EAAE,MAAM,EAAN,MAAM,EAAE,CAAC,CAAC;GACxC;;;SAEmB,uBAAC,MAAM,EAAC;;;AAE3B,UAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAC,GAAG,EAAI;;AAE9B,UAAK,SAAS,CAAC,CACX;AACF,WAAM,EAAE,EAAC,MAAM,EAAN,MAAM,EAAC;KAChB,EAAC;AACE,WAAM,EAAG;AACX,SAAG,EAAE,SAAS;AACd,WAAK,EAAE,cAAc;MAClB;KACJ,EACD;AACC,YAAO,EAAE;AACR,aAAO,EAAE,CAAC,CAAC;MACX;KACD,CACD,EAAE,UAAS,GAAG,EAAE,UAAU,EAAC;AAC3B,QAAG,CAAC,UAAU,CAAC,CAAC;KAChB,CAAC,CAAC;IAGH,CAAC,CAAC;GACH;;;SAEkB,sBAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAC;AACxC,UAAO,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,EAAN,MAAM,EAAE,MAAM,EAAN,MAAM,EAAC,EAAE,UAAS,GAAG,EAAE,IAAI,EAAE;AAC1D,QAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAC3C,QAAI,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACxB,SAAG,GAAG,EAAE;AACP,aAAO,CAAC,KAAK,iCAA8B,MAAM,CAAG,CAAA;MACpD;KACD,CAAC,CAAC;IACH,CAAC,CAAC;GACH;;;QA5DI,UAAU;;;AA+DhB,WAAW,CAAC,MAAM,oCAAY,UAAU,CAAC,CAAC;;qBAE3B,sBAAS,KAAK,CAAC,OAAO,EAAE,WAAW,CAAC","file":"karma.model.js","sourcesContent":["import Mongoose from 'mongoose';\nimport LoadClass from 'mongoose-class-wrapper';\n\nvar karmaSchema = Mongoose.Schema({\n\tteamId: String,\n\tuserId: String,\t\n\tkarmaPoints: Number\n});\n\nclass KarmaModel {\n\n\tstatic addOrCreate(teamId, userId, amnt){\n\t\tthis.findOne({teamId, userId}, (err, user) => {\n\t\t\tif (user) {\n\t\t\t\tuser.karmaPoints = user.karmaPoints + amnt;\n\t\t\t\tuser.save(function (err) {\n\t\t\t\t\tconsole.err(`Couldn't add karma to ${userId}`);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tself.create({\n\t\t\t\t\t\"teamId\": teamId,\n\t\t\t\t\t\"userId\": userId,\n\t\t\t\t\t\"karmaPoints\": karmaPoints\n\t\t\t\t}, function(err, usr) {\n\t\t\t\t\tif (err) console.err(`Couldn't create user ${userId} with points ${karmaPoints}`)\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\tstatic getUserPoints(teamId, userId){\n\t\treturn this.findOne({ teamId, userId });\n\t}\n\t\n\tstatic getTeamPoints(teamId){\n\t\t\n\t\treturn new Promise((res,rej) =>{\n\t\t\t\n\t\t\tthis.aggregate([\n\t\t\t    {\n\t\t\t\t\t$match: {teamId}\n\t\t\t\t},{\n\t\t\t\t    $group : {\n\t\t\t\t\t\t_id: '$userId',\n\t\t\t\t\t\tcount: '$karmaPoints'\n\t\t\t\t    }\n\t\t\t\t},\n\t\t\t\t{ \n\t\t\t\t\t\"$sort\": { \n\t\t\t\t\t\t\"count\": -1 \n\t\t\t\t\t} \n\t\t\t\t},\n\t\t\t], function(err, collection){\n\t\t\t\tres(collection);\n\t\t\t});\n\t\t\t\t\n\t\t\t\n\t\t});\n\t}\n\t\n\tstatic removePoints(teamId, userId, amnt){\n\t\treturn this.findOne({ teamId, userId}, function(err, user) {\n\t\t\tuser.karmaPoints = user.karmaPoints + amnt;\n\t\t\tuser.save(function (err) {\n\t\t\t\tif(err) {\n\t\t\t\t\tconsole.error(`Couldn't update karma for ${userId}`)\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nkarmaSchema.plugin(LoadClass, KarmaModel);\n\nexport default Mongoose.model('Karma', karmaSchema);"],"sourceRoot":"/home/checkroth/Documents/Projects/KarmaSlack/es6"}